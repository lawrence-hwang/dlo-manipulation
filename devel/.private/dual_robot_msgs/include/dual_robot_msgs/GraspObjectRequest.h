// Generated by gencpp from file dual_robot_msgs/GraspObjectRequest.msg
// DO NOT EDIT!


#ifndef DUAL_ROBOT_MSGS_MESSAGE_GRASPOBJECTREQUEST_H
#define DUAL_ROBOT_MSGS_MESSAGE_GRASPOBJECTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace dual_robot_msgs
{
template <class ContainerAllocator>
struct GraspObjectRequest_
{
  typedef GraspObjectRequest_<ContainerAllocator> Type;

  GraspObjectRequest_()
    : robot()
    , object_grasp_pose()  {
    }
  GraspObjectRequest_(const ContainerAllocator& _alloc)
    : robot(_alloc)
    , object_grasp_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_type;
  _robot_type robot;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _object_grasp_pose_type;
  _object_grasp_pose_type object_grasp_pose;





  typedef boost::shared_ptr< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GraspObjectRequest_

typedef ::dual_robot_msgs::GraspObjectRequest_<std::allocator<void> > GraspObjectRequest;

typedef boost::shared_ptr< ::dual_robot_msgs::GraspObjectRequest > GraspObjectRequestPtr;
typedef boost::shared_ptr< ::dual_robot_msgs::GraspObjectRequest const> GraspObjectRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator1> & lhs, const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator2> & rhs)
{
  return lhs.robot == rhs.robot &&
    lhs.object_grasp_pose == rhs.object_grasp_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator1> & lhs, const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dual_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0172268e86a44ff3f9179a562ceedc3a";
  }

  static const char* value(const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0172268e86a44ff3ULL;
  static const uint64_t static_value2 = 0xf9179a562ceedc3aULL;
};

template<class ContainerAllocator>
struct DataType< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dual_robot_msgs/GraspObjectRequest";
  }

  static const char* value(const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot\n"
"geometry_msgs/Pose object_grasp_pose \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot);
      stream.next(m.object_grasp_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspObjectRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dual_robot_msgs::GraspObjectRequest_<ContainerAllocator>& v)
  {
    s << indent << "robot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot);
    s << indent << "object_grasp_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.object_grasp_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUAL_ROBOT_MSGS_MESSAGE_GRASPOBJECTREQUEST_H
