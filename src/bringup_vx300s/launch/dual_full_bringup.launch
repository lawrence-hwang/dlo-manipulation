<launch>
  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />
  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />
  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>
  <!-- Choose controller manager: fake, simple, or ros_control -->
  <arg name="moveit_controller_manager" default="simple" />
  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />
  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_gui" default="false" />
  <arg name="use_rviz" default="true" />
  <!-- By default, use actual with vision packages -->
  <arg name="use_sim" default="false"/>
  <arg name="use_actual" default="true"/>
  <arg name="launch_vision" default="true"/>
  <!-- By default, record arm trajectories and export to JSON file -->
  <arg name="use_json" default="true"/>
  
  <!-- If needed, broadcast static tf for robot root -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world base_link" />

  <!-- remap and rename JointStates for moveit connection to robots -->
  <node pkg="bringup_vx300s" type="remap_joints.py" name="remap_joints" args="a_bot_ b_bot_" output="screen"/>

  <node
    name="robot_state_publisher"
    pkg="robot_state_publisher"
    type="robot_state_publisher">
  </node>
  
  <!-- load robot description for ros control -->
  <param name="robot_description" command="xacro  '$(find dual_vx300s_description)/urdf/dual_vx300s.urdf.xacro'"/>
  
  <!-- bringup a_bot ros control -->
  <include file="$(find interbotix_xsarm_ros_control)/launch/xsarm_ros_control.launch">
    <arg name="robot_model"                       value="vx300s"/>
    <arg name="robot_name"                        value="a_bot_"/>
    <arg name="controllers"                       value="$(find bringup_vx300s)/config/a_bot_controllers.yaml"/>
    <arg name="motor_configs"                     value="$(find bringup_vx300s)/config/a_bot_motor_config.yaml"/>
    <arg name="dof"                               value="6"/>
  </include>

  <!-- bringup b_bot ros control -->
  <include file="$(find interbotix_xsarm_ros_control)/launch/xsarm_ros_control.launch">
    <arg name="robot_model"                       value="vx300s"/>
    <arg name="robot_name"                        value="b_bot_"/>
    <arg name="controllers"                       value="$(find bringup_vx300s)/config/b_bot_controllers.yaml"/>
    <arg name="motor_configs"                     value="$(find bringup_vx300s)/config/b_bot_motor_config.yaml"/>
    <arg name="dof"                               value="6"/>
  </include>
  
  <!-- launch move group -->
  <include file="$(find dual_vx300s_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
    <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find dual_vx300s_moveit_config)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(find bringup_vx300s)/config/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Launch node for colleting and formatting arm trajectories for export -->
  <group if="$(arg use_json)">
    <node pkg="wire_modeling" type="json_output.py" name="json_output" output="screen"/>
  </group>

  <!-- Launch Vision-->
<group if="$(arg launch_vision)">
    <include file="$(find realsense2_camera)/launch/rs_camera.launch">
    <arg name="filters"                        value="pointcloud"/>
    <arg name="align_depth"                      value="true"/>
    <arg name="output" value="log"/>
    </include>

    <!--Nodes involved with Segmentation of Wire-->
    <node pkg="vision" type="rgb_segmentation.py" name="rgb_segmentation" output="screen" />
    <node pkg="vision" type="process_point_cloud_server.py" name="process_point_cloud_server" output="screen" />

    <!--Convert Segmented Depth image to PC-->
    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
    <node pkg="nodelet" type="nodelet" name="nodelet1"
    args="load depth_image_proc/point_cloud_xyz nodelet_manager">
    <remap from="camera_info" to="/seg_depth/camera_info"/>
    <remap from="image_rect" to="/seg_depth/image_raw"/>
    <remap from="points" to="/rscamera/depth/points"/>
    </node>

    <!--Camera Transform-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="camera_broadcaster" args="-0.3556 0.0 0.4064 0 0 0 1 world camera_link" />
</group>

<!--Dual Robot control service-->
<node pkg="dual_robot_control" type="robot_services.py" name="robot_services" output="screen" />

</launch>
